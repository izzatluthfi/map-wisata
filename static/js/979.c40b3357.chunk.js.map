{"version":3,"file":"static/js/979.c40b3357.chunk.js","mappings":"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","sources":["Const/Map.js","Page/Map.jsx","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["export const REACT_APP_MAP_ACCESS_TOKEN = process.env.REACT_APP_MAP_ACCESS_TOKEN || 'pk.eyJ1IjoiYWx2YXJpenFpIiwiYSI6ImNreW14ZDM5MTNrdmUzMHFreXVtZ2dnaWkifQ.l4uadGhS9aAlUZ8wbYe2hw'","// import libraries\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\n// import { haversine } from \"../Helper/Haversine\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n// import MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\r\n// mapboxgl.workerClass = MapboxWorker;\r\n\r\n// import consts\r\nimport { REACT_APP_MAP_ACCESS_TOKEN } from \"../Const/Map\";\r\n\r\n// import components\r\n// import TabMenu from \"../Component/TabMenu\";\r\n\r\n// import geojson\r\nimport geojson from \"../wisata.json\";\r\nimport geospatial from \"../batas-wilayah.json\";\r\n\r\n// assign mapbox access token\r\nmapboxgl.accessToken = REACT_APP_MAP_ACCESS_TOKEN;\r\n\r\nexport default function Map() {\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const { category } = useParams();\r\n  const navigate = useNavigate();\r\n  let places = [];\r\n\r\n  const [lat, setLat] = useState(-8.1424);\r\n  const [lng, setLng] = useState(112.1727);\r\n  const [zoom, setZoom] = useState(10);\r\n\r\n  // filter geojson by category\r\n  if (category) {\r\n    places = geojson.features.filter((feature) => {\r\n      return feature.properties.kategori === category;\r\n    });\r\n  } else {\r\n    places = geojson.features;\r\n  }\r\n\r\n  // init gelocation object\r\n  const geolocate = new mapboxgl.GeolocateControl({\r\n    positionOptions: {\r\n      enableHighAccuracy: true,\r\n    },\r\n    trackUserLocation: true,\r\n    showUserHeading: true,\r\n  });\r\n\r\n  // watch update geolocation\r\n  // geolocate.on(\"geolocate\", () => {\r\n  //   // get closest distance from current location\r\n  //   const closest = places.reduce((prev, curr) => {\r\n  //     const prevDistance = haversine(\r\n  //       geolocate._lastKnownPosition.coords.latitude,\r\n  //       geolocate._lastKnownPosition.coords.longitude,\r\n  //       prev.geometry.coordinates[1],\r\n  //       prev.geometry.coordinates[0]\r\n  //     );\r\n  //     const currDistance = haversine(\r\n  //       geolocate._lastKnownPosition.coords.latitude,\r\n  //       geolocate._lastKnownPosition.coords.longitude,\r\n  //       curr.geometry.coordinates[1],\r\n  //       curr.geometry.coordinates[0]\r\n  //     );\r\n  //     return prevDistance < currDistance ? prev : curr;\r\n  //   });\r\n\r\n  //   // create marker\r\n  //   places.forEach((feature) => {\r\n  //     const placeholder = document.createElement(\"div\");\r\n  //     let popupDescription = \"\";\r\n\r\n  //     // set placeholder type\r\n  //     if (feature.properties.nama === closest.properties.nama) {\r\n  //       placeholder.className = \"marker-closest\";\r\n  //       popupDescription = \"<b>Lokasi wisata terdekat</b>\";\r\n  //     } else {\r\n  //       placeholder.className = \"marker\";\r\n  //       popupDescription = \"\";\r\n  //     }\r\n\r\n  //     // create marker object\r\n  //     const marker = new mapboxgl.Marker(placeholder)\r\n  //       .setLngLat(feature.geometry.coordinates)\r\n  //       .setPopup(\r\n  //         new mapboxgl.Popup({ offset: 25 }) // add popups\r\n  //           .setHTML(\r\n  //             `\r\n  //             <div>\r\n  //               ${popupDescription}\r\n  //               <table className=\"table-auto\">\r\n  //                 <tbody>\r\n  //                   <tr>\r\n  //                     <td style=\"vertical-align: top;\">Nama</td>\r\n  //                     <td style=\"vertical-align: top;\">:</td>\r\n  //                     <td style=\"vertical-align: top;\">${\r\n  //                       feature.properties.nama\r\n  //                     }</td>\r\n  //                   </tr>\r\n  //                   <tr>\r\n  //                     <td style=\"vertical-align: top;\">Jarak</td>\r\n  //                     <td style=\"vertical-align: top;\">:</td>\r\n  //                     <td style=\"vertical-align: top;\">${haversine(\r\n  //                       geolocate._lastKnownPosition.coords.latitude,\r\n  //                       geolocate._lastKnownPosition.coords.longitude,\r\n  //                       feature.geometry.coordinates[1],\r\n  //                       feature.geometry.coordinates[0]\r\n  //                     ).toFixed(4)} km</td>\r\n  //                   </tr>\r\n  //                 </tbody>\r\n  //               </table>\r\n  //             </div>\r\n  //             `\r\n  //           )\r\n  //       )\r\n  //       .addTo(map.current);\r\n\r\n  //     // check if current feature is closest\r\n  //     if (feature.properties.nama === closest.properties.nama) {\r\n  //       marker.getPopup().remove(); // remove current popup if exists\r\n  //       marker.togglePopup();\r\n  //     }\r\n  //   });\r\n\r\n  //   // dev log\r\n  //   console.log(\"update lokasi\", {\r\n  //     lat: geolocate._lastKnownPosition.coords.latitude,\r\n  //     lng: geolocate._lastKnownPosition.coords.longitude,\r\n  //   });\r\n  //   console.log(\"tempat wisata terdekat\", closest);\r\n  // });\r\n\r\n  useEffect(() => {\r\n    if (map.current) return; // initialize map only once\r\n    map.current = new mapboxgl.Map({\r\n      container: mapContainer.current,\r\n      style: \"mapbox://styles/mapbox/streets-v12\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      center: [lng, lat],\r\n      zoom: zoom,\r\n      attributionControl: false,\r\n      doubleClickZoom: false,\r\n    })\r\n      .addControl(geolocate)\r\n      .on(\"move\", () => {\r\n        setLng(map.current.getCenter().lng.toFixed(4));\r\n        setLat(map.current.getCenter().lat.toFixed(4));\r\n        setZoom(map.current.getZoom().toFixed(2));\r\n      })\r\n      .on(\"load\", () => {\r\n        geolocate.trigger();\r\n\r\n        // geospatial\r\n        map.current.addSource(\"maine\", {\r\n          type: \"geojson\",\r\n          data: geospatial,\r\n        });\r\n        // Add a new layer to visualize the polygon.\r\n        map.current.addLayer({\r\n          id: \"maine\",\r\n          type: \"fill\",\r\n          source: \"maine\", // reference the data source\r\n          layout: {},\r\n          paint: {\r\n            \"fill-color\": \"#0080ff\", // blue color fill\r\n            \"fill-opacity\": 0.05,\r\n          },\r\n        });\r\n        // Add a black outline around the polygon.\r\n        map.current.addLayer({\r\n          id: \"outline\",\r\n          type: \"line\",\r\n          source: \"maine\",\r\n          layout: {},\r\n          paint: {\r\n            \"line-color\": \"#000\",\r\n            \"line-width\": 2,\r\n          },\r\n        });\r\n\r\n        map.current.addSource(\"places\", {\r\n          type: \"geojson\",\r\n          data: geojson,\r\n        });\r\n\r\n        // create map markers icon\r\n        map.current.loadImage(\r\n          \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\r\n          (error, image) => {\r\n            if (error) throw error;\r\n            map.current.addImage(\"custom-marker\", image);\r\n          }\r\n        );\r\n\r\n        // Add markers to map.\r\n        const filterGroup = document.getElementById(\"filter-group\");\r\n        for (const feature of places) {\r\n          const symbol = feature.properties.kategori;\r\n          const layerID = `${symbol}`;\r\n\r\n          // Add a layer for this symbol type if it hasn't been added already.\r\n          if (!map.current.getLayer(layerID)) {\r\n            map.current.addLayer({\r\n              id: layerID,\r\n              type: \"symbol\",\r\n              source: \"places\",\r\n              layout: {\r\n                // These icons are a part of the Mapbox Light style.\r\n                // To view all images available in a Mapbox style, open\r\n                // the style in Mapbox Studio and click the \"Images\" tab.\r\n                // To add a new image to the style at runtime see\r\n                // https://docs.mapbox.com/mapbox-gl-js/example/add-image/\r\n                \"icon-image\": `custom-marker`,\r\n                \"icon-allow-overlap\": true,\r\n                \"icon-size\": 0.05,\r\n              },\r\n              filter: [\"==\", \"kategori\", symbol],\r\n            });\r\n\r\n            // Add checkbox and label elements for the layer.\r\n            const input = document.createElement(\"input\");\r\n            input.type = \"checkbox\";\r\n            input.id = layerID;\r\n            input.checked = true;\r\n            filterGroup.appendChild(input);\r\n\r\n            const label = document.createElement(\"label\");\r\n            label.setAttribute(\"for\", layerID);\r\n            label.textContent = symbol;\r\n            filterGroup.appendChild(label);\r\n\r\n            // When the checkbox changes, update the visibility of the layer.\r\n            input.addEventListener(\"change\", (e) => {\r\n              map.current.setLayoutProperty(\r\n                layerID,\r\n                \"visibility\",\r\n                e.target.checked ? \"visible\" : \"none\"\r\n              );\r\n            });\r\n\r\n            map.current.on(\"click\", layerID, (e) => {\r\n              // new mapboxgl.Popup()\r\n              //   .setLngLat(e.features[0].geometry.coordinates)\r\n              //   .setHTML(\r\n              //     `<div class=\"flex flex-col\">\r\n              //       <div class=\"text-blue-600 font-bold text-lg\">${e.features[0].properties.nama}</div>\r\n              //       <div class=\"text-sm text-gray-500\">${e.features[0].properties.kategori}</div>\r\n              //     </div>`\r\n              //   )\r\n              //   .addTo(map.current);\r\n              navigate(`/detail-tempat/${e.features[0].properties.nama}`);\r\n            });\r\n          }\r\n        }\r\n      });\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* <div className=\"flex justify-center bottom-0\">\r\n        <div className=\"absolute p-2 z-10 backdrop-blur-sm bg-white/70 text-blue-600 rounded-md m-2 text-sm\">\r\n          Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\r\n        </div>\r\n      </div> */}\r\n      {/* <div className=\"flex lg:justify-center\">\r\n        <TabMenu uri=\"\" className=\"relative\" />\r\n      </div> */}\r\n      <div ref={mapContainer} className=\"h-screen min-h-max\" />\r\n      <nav id=\"filter-group\" className=\"filter-group\"></nav>\r\n    </div>\r\n  );\r\n}\r\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["REACT_APP_MAP_ACCESS_TOKEN","process","Map","mapContainer","useRef","map","category","useParams","navigate","useNavigate","places","useState","lat","setLat","lng","setLng","zoom","setZoom","geojson","feature","properties","kategori","geolocate","mapboxgl","positionOptions","enableHighAccuracy","trackUserLocation","showUserHeading","useEffect","current","container","style","width","height","center","attributionControl","doubleClickZoom","addControl","on","getCenter","toFixed","getZoom","trigger","addSource","type","data","geospatial","addLayer","id","source","layout","paint","loadImage","error","image","addImage","filterGroup","document","getElementById","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","symbol","layerID","getLayer","filter","input","createElement","checked","appendChild","label","setAttribute","textContent","addEventListener","setLayoutProperty","target","features","nama","ref","className"],"sourceRoot":""}