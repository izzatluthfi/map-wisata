{"version":3,"file":"static/js/846.850560dd.chunk.js","mappings":"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","sources":["Const/Map.js","Helper/Html.js","Helper/Haversine.js","Component/BackButton.jsx","Page/DetailPlace.jsx"],"sourcesContent":["export const REACT_APP_MAP_ACCESS_TOKEN = process.env.REACT_APP_MAP_ACCESS_TOKEN || 'pk.eyJ1IjoiYWx2YXJpenFpIiwiYSI6ImNreW14ZDM5MTNrdmUzMHFreXVtZ2dnaWkifQ.l4uadGhS9aAlUZ8wbYe2hw'","  // parse html string to html element\r\n  export const parseHtml = (html) => {\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(html, \"text/html\");\r\n    return doc.body.textContent || \"\";\r\n  };","const deg2rad = (deg) => {\r\n  return deg * (Math.PI / 180);\r\n};\r\n\r\nexport const haversine = (lat1, lon1, lat2, lon2) => {\r\n  const R = 6371; // Radius of the earth in km\r\n  const dLat = deg2rad(lat2 - lat1); // deg2rad below\r\n  const dLon = deg2rad(lon2 - lon1);\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(deg2rad(lat1)) *\r\n      Math.cos(deg2rad(lat2)) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const d = R * c; // Distance in km\r\n  return d;\r\n};\r\n\r\n// =================================================================================================\r\n// Rumus Haversine untuk menghitung jarak lingkaran besar antara dua titik\r\n// yaitu, jarak terpendek di atas permukaan bumi memberikan jarak antara titik\r\n//\r\n// \r\n// Rumus Haversine\r\n// formula:\ta = sin²(Δφ/2) + cos φ1 ⋅ cos φ2 ⋅ sin²(Δλ/2)\r\n// c = 2 ⋅ atan2( √a, √(1−a) )\r\n// d = R ⋅ c\r\n// \r\n//\r\n// φ adalah latitude, λ adalah longitude, R adalah radius radius (mean radius = 6,371km);\r\n// sudut harus dalam radian untuk diteruskan ke fungsi trigonometri\r\n// =================================================================================================","// import libraries\r\nimport * as React from \"react\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport KeyboardBackspaceRoundedIcon from \"@mui/icons-material/KeyboardBackspaceRounded\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function BackButton() {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div className=\"absolute z-50\">\r\n      <IconButton\r\n        color=\"primary\"\r\n        aria-label=\"back\"\r\n        className=\"bg-white/70\"\r\n        onClick={() => navigate(-1)}\r\n      >\r\n        {/* <Link to={navigate}>\r\n          <KeyboardBackspaceRoundedIcon />\r\n        </Link> */}\r\n        <KeyboardBackspaceRoundedIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n","// import libraries\r\nimport * as React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@mui/material/Rating\";\r\nimport Button from \"@mui/material/Button\";\r\nimport MapRoundedIcon from \"@mui/icons-material/MapRounded\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { haversine } from \"../Helper/Haversine\";\r\n\r\n// import consts\r\nimport { REACT_APP_MAP_ACCESS_TOKEN } from \"../Const/Map\";\r\n\r\n// import geojson\r\nimport geojson from \"../wisata.json\";\r\n\r\n// import components\r\nimport BackButton from \"../Component/BackButton\";\r\n\r\n// import helper\r\nimport { parseHtml } from \"../Helper/Html\";\r\n\r\n// assign mapbox access token\r\nmapboxgl.accessToken = REACT_APP_MAP_ACCESS_TOKEN;\r\n\r\nexport default function DetailPlace() {\r\n  const { name } = useParams();\r\n  const [activeHaversine, setActiveHaversine] = React.useState(false);\r\n\r\n  const mapContainer = React.useRef(null);\r\n  const map = React.useRef(null);\r\n\r\n  const [lat, setLat] = React.useState(-8.1424);\r\n  const [lng, setLng] = React.useState(112.1727);\r\n  const [zoom, setZoom] = React.useState(10);\r\n\r\n  // init gelocation object\r\n  const geolocate = new mapboxgl.GeolocateControl({\r\n    positionOptions: {\r\n      enableHighAccuracy: true,\r\n    },\r\n    trackUserLocation: true,\r\n    showUserHeading: true,\r\n  });\r\n\r\n  const place = geojson.features.find(\r\n    (feature) => feature.properties.nama === name\r\n  );\r\n\r\n  // watch update geolocation\r\n  geolocate.on(\"geolocate\", () => {\r\n    // create marker\r\n    const placeholder = document.createElement(\"div\");\r\n    placeholder.className = \"marker\";\r\n\r\n    // draw line\r\n    map.current.addSource(\"place\", {\r\n      type: \"geojson\",\r\n      data: {\r\n        type: \"Feature\",\r\n        properties: {},\r\n        geometry: {\r\n          type: \"LineString\",\r\n          coordinates: [\r\n            [place.geometry.coordinates[0], place.geometry.coordinates[1]],\r\n            [\r\n              geolocate._lastKnownPosition.coords.longitude,\r\n              geolocate._lastKnownPosition.coords.latitude,\r\n            ],\r\n          ],\r\n        },\r\n      },\r\n    });\r\n\r\n    // line style layer\r\n    map.current.addLayer({\r\n      id: \"place\",\r\n      type: \"line\",\r\n      source: \"place\",\r\n      layout: {\r\n        \"line-join\": \"round\",\r\n        \"line-cap\": \"round\",\r\n      },\r\n      paint: {\r\n        \"line-color\": \"#fc0303\",\r\n        \"line-width\": 2,\r\n      },\r\n    });\r\n\r\n    // create marker object\r\n    const marker = new mapboxgl.Marker(placeholder)\r\n      .setLngLat(place.geometry.coordinates)\r\n      .setPopup(\r\n        new mapboxgl.Popup({ offset: 25 }) // add popups\r\n          .setHTML(\r\n            `\r\n              <div>\r\n                <table className=\"table-auto\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <td style=\"vertical-align: top;\">Jarak</td>\r\n                      <td style=\"vertical-align: top;\">:</td>\r\n                      <td style=\"vertical-align: top;\">${haversine(\r\n                        geolocate._lastKnownPosition.coords.latitude,\r\n                        geolocate._lastKnownPosition.coords.longitude,\r\n                        place.geometry.coordinates[1],\r\n                        place.geometry.coordinates[0]\r\n                      ).toFixed(4)} km</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              `\r\n          )\r\n      )\r\n      .addTo(map.current);\r\n    marker.togglePopup();\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (map.current) return; // initialize map only once\r\n    map.current = new mapboxgl.Map({\r\n      container: mapContainer.current,\r\n      style: \"mapbox://styles/mapbox/streets-v12\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      center: [lng, lat],\r\n      zoom: zoom,\r\n      attributionControl: false,\r\n      doubleClickZoom: false,\r\n    })\r\n      .addControl(geolocate)\r\n      .on(\"move\", () => {\r\n        setLng(map.current.getCenter().lng.toFixed(4));\r\n        setLat(map.current.getCenter().lat.toFixed(4));\r\n        setZoom(map.current.getZoom().toFixed(2));\r\n      })\r\n      .on(\"load\", () => {\r\n        geolocate.trigger();\r\n      });\r\n  });\r\n\r\n  const handleHaversine = () => {\r\n    activeHaversine ? setActiveHaversine(false) : setActiveHaversine(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-screen min-h-max overflow-y-auto\">\r\n      <BackButton />\r\n\r\n      <div\r\n        className={`overflow-hidden ${activeHaversine ? \"relative\" : \"hidden\"}`}\r\n      >\r\n        <div ref={mapContainer} className=\"w-full h-72 xl:h-96\" />\r\n      </div>\r\n      {!activeHaversine && (\r\n        <img\r\n          src={place.properties.imageThumbnail}\r\n          className=\"object-cover w-full h-72 xl:h-96\"\r\n          alt={place.properties.nama}\r\n          loading=\"lazy\"\r\n        />\r\n      )}\r\n      <div className=\"p-6 h-full\">\r\n        <h1 className=\"text-2xl font-title transition-colors duration-200 capitalize\">\r\n          {place.properties.nama}\r\n        </h1>\r\n        <h3 className=\"mt-2 text-sm font-title transition-colors duration-200 text-gray-500 capitalize\">\r\n          {place.properties.kategori}\r\n        </h3>\r\n        <div className=\"flex mt-2 justify-between items-center\">\r\n          <Rating\r\n            name=\"rating\"\r\n            value={place.properties.rating}\r\n            size=\"small\"\r\n            readOnly\r\n          />\r\n          <Button\r\n            onClick={handleHaversine}\r\n            variant={activeHaversine ? \"contained\" : \"outlined\"}\r\n            size=\"small\"\r\n            startIcon={<MapRoundedIcon />}\r\n          >\r\n            Haversine\r\n          </Button>\r\n        </div>\r\n        <p className=\"mt-2 mb-2 text-gray-700 text-justify\">\r\n          {parseHtml(place.properties.description)}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["REACT_APP_MAP_ACCESS_TOKEN","process","parseHtml","html","DOMParser","parseFromString","body","textContent","deg2rad","deg","Math","PI","BackButton","navigate","useNavigate","className","IconButton","color","onClick","KeyboardBackspaceRounded","DetailPlace","name","useParams","React","activeHaversine","setActiveHaversine","mapContainer","map","lat","setLat","lng","setLng","zoom","setZoom","geolocate","mapboxgl","positionOptions","enableHighAccuracy","trackUserLocation","showUserHeading","place","geojson","feature","properties","nama","on","placeholder","document","createElement","current","addSource","type","data","geometry","coordinates","_lastKnownPosition","coords","longitude","latitude","addLayer","id","source","layout","paint","setLngLat","setPopup","offset","setHTML","lat1","lon1","lat2","lon2","dLat","dLon","a","sin","cos","atan2","sqrt","haversine","toFixed","addTo","togglePopup","container","style","width","height","center","attributionControl","doubleClickZoom","addControl","getCenter","getZoom","trigger","ref","src","imageThumbnail","alt","loading","kategori","Rating","value","rating","size","readOnly","Button","variant","startIcon","MapRounded","description"],"sourceRoot":""}